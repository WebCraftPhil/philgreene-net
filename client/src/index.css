@tailwind base;
@tailwind components;
@tailwind utilities;

/* LIGHT MODE */
:root {
  --button-outline: rgba(0,0,0, .10);
  --badge-outline: rgba(0,0,0, .05);

  /* Automatic computation of border around primary / danger buttons */
  --opaque-button-border-intensity: -8; /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(0,0,0, .03);
  --elevate-2: rgba(0,0,0, .08);

  --background: 0 0% 98%;

  --foreground: 220 15% 12%;

  --border: 220 13% 91%;

  --card: 0 0% 96%;

  --card-foreground: 220 15% 12%;

  --card-border: 220 13% 89%;

  --sidebar: 220 6% 92%;

  --sidebar-foreground: 220 15% 12%;

  --sidebar-border: 220 13% 87%;

  --sidebar-primary: 280 85% 65%;

  --sidebar-primary-foreground: 0 0% 98%;

  --sidebar-accent: 180 20% 85%;

  --sidebar-accent-foreground: 180 40% 25%;

  --sidebar-ring: 280 85% 65%;

  --popover: 0 0% 94%;

  --popover-foreground: 220 15% 12%;

  --popover-border: 220 13% 87%;

  --primary: 280 85% 65%;

  --primary-foreground: 0 0% 98%;

  --secondary: 220 10% 88%;

  --secondary-foreground: 220 15% 12%;

  --muted: 220 8% 90%;

  --muted-foreground: 220 15% 35%;

  --accent: 180 15% 88%;

  --accent-foreground: 180 40% 25%;

  --destructive: 0 70% 55%;

  --destructive-foreground: 0 0% 98%;

  --input: 220 13% 85%;
  --ring: 280 85% 65%;
  --chart-1: 280 85% 30%;
  --chart-2: 180 70% 35%;
  --chart-3: 120 80% 40%;
  --chart-4: 15 75% 45%;
  --chart-5: 230 45% 30%;

  --font-sans: Inter, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Space Grotesk, monospace;
  --radius: .5rem; /* 8px */
  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.3);
  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.4);
  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 91% / 0.3), 0px 1px 2px -1px hsl(220 13% 91% / 0.5);
  --shadow: 0px 2px 0px 0px hsl(220 13% 91% / 0.3), 0px 1px 2px -1px hsl(220 13% 91% / 0.5);
  --shadow-md: 0px 2px 0px 0px hsl(220 13% 91% / 0.3), 0px 2px 4px -1px hsl(220 13% 91% / 0.6);
  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 91% / 0.3), 0px 4px 6px -1px hsl(220 13% 91% / 0.7);
  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.3), 0px 8px 10px -1px hsl(220 13% 91% / 0.8);
  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.4);
  --tracking-normal: 0em;
  --spacing: 0.25rem;

  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */

  /* Fallback for older browsers */
  --sidebar-primary-border: hsl(var(--sidebar-primary));
  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --sidebar-accent-border: hsl(var(--sidebar-accent));
  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --primary-border: hsl(var(--primary));
  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --secondary-border: hsl(var(--secondary));
  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --muted-border: hsl(var(--muted));
  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --accent-border: hsl(var(--accent));
  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);

  /* Fallback for older browsers */
  --destructive-border: hsl(var(--destructive));
  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);
}

.dark {
  --button-outline: rgba(255,255,255, .10);
  --badge-outline: rgba(255,255,255, .05);

  --opaque-button-border-intensity: 9;  /* In terms of percentages */

  /* Backgrounds applied on top of other backgrounds when hovered/active */
  --elevate-1: rgba(255,255,255, .04);
  --elevate-2: rgba(255,255,255, .09);

  --background: 230 45% 8%;

  --foreground: 220 15% 92%;

  --border: 230 20% 18%;

  --card: 230 35% 12%;

  --card-foreground: 220 15% 92%;

  --card-border: 230 25% 20%;

  --sidebar: 230 40% 10%;

  --sidebar-foreground: 220 15% 92%;

  --sidebar-border: 230 30% 16%;

  --sidebar-primary: 280 85% 65%;

  --sidebar-primary-foreground: 230 45% 8%;

  --sidebar-accent: 180 30% 20%;

  --sidebar-accent-foreground: 180 70% 85%;

  --sidebar-ring: 280 85% 65%;

  --popover: 230 30% 14%;

  --popover-foreground: 220 15% 92%;

  --popover-border: 230 25% 22%;

  --primary: 280 85% 65%;

  --primary-foreground: 230 45% 8%;

  --secondary: 230 25% 16%;

  --secondary-foreground: 220 15% 92%;

  --muted: 230 20% 12%;

  --muted-foreground: 220 15% 70%;

  --accent: 180 25% 18%;

  --accent-foreground: 180 70% 85%;

  --destructive: 0 70% 55%;

  --destructive-foreground: 0 0% 98%;

  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */
  --input: 230 25% 25%;
  --ring: 280 85% 65%;
  --chart-1: 280 85% 75%;
  --chart-2: 180 70% 65%;
  --chart-3: 120 80% 70%;
  --chart-4: 15 75% 75%;
  --chart-5: 230 60% 70%;

  --shadow-2xs: 0px 2px 0px 0px hsl(230 45% 8% / 0.8);
  --shadow-xs: 0px 2px 0px 0px hsl(230 45% 8% / 0.9);
  --shadow-sm: 0px 2px 0px 0px hsl(230 45% 8% / 0.8), 0px 1px 2px -1px hsl(230 45% 8% / 0.9);
  --shadow: 0px 2px 0px 0px hsl(230 45% 8% / 0.8), 0px 1px 2px -1px hsl(230 45% 8% / 0.9);
  --shadow-md: 0px 2px 0px 0px hsl(230 45% 8% / 0.8), 0px 2px 4px -1px hsl(230 45% 8% / 0.95);
  --shadow-lg: 0px 2px 0px 0px hsl(230 45% 8% / 0.8), 0px 4px 6px -1px hsl(230 45% 8% / 0.95);
  --shadow-xl: 0px 2px 0px 0px hsl(230 45% 8% / 0.8), 0px 8px 10px -1px hsl(230 45% 8% / 0.95);
  --shadow-2xl: 0px 2px 0px 0px hsl(230 45% 8% / 0.9);

}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

/**
 * Using the elevate system.
 * Automatic contrast adjustment.
 *
 * <element className="hover-elevate" />
 * <element className="active-elevate-2" />
 *
 * // Using the tailwind utility when a data attribute is "on"
 * <element className="toggle-elevate data-[state=on]:toggle-elevated" />
 * // Or manually controlling the toggle state
 * <element className="toggle-elevate toggle-elevated" />
 *
 * Elevation systems have to handle many states.
 * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)
 * - toggled or not
 * - focused or not (this is not handled with these utilities)
 *
 * Even without handling focused or not, this is six possible combinations that
 * need to be distinguished from eachother visually.
 */
@layer utilities {

  /* Hide ugly search cancel button in Chrome until we can style it properly */
  input[type="search"]::-webkit-search-cancel-button {
    @apply hidden;
  }

  /* Placeholder styling for contentEditable div */
  [contenteditable][data-placeholder]:empty::before {
    content: attr(data-placeholder);
    color: hsl(var(--muted-foreground));
    pointer-events: none;
  }

  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of
   * buttons/badges can remove the automatic brightness adjustment on interactions
   * and program their own. */
  .no-default-hover-elevate {}

  .no-default-active-elevate {}


  /**
   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.
   * This way they can stack/compound. Both will overlap the parent's borders!
   * So borders will be automatically adjusted both on toggle, and hover/active,
   * and they will be compounded.
   */
  .toggle-elevate::before,
  .toggle-elevate-2::before {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: -1;
    /* sits behind content but above backdrop */
  }

  .toggle-elevate.toggle-elevated::before {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.toggle-elevate::before {
    inset: -1px;
  }

  /* Does not work on elements with overflow:hidden! */
  .hover-elevate:not(.no-default-hover-elevate),
  .active-elevate:not(.no-default-active-elevate),
  .hover-elevate-2:not(.no-default-hover-elevate),
  .active-elevate-2:not(.no-default-active-elevate) {
    position: relative;
    z-index: 0;
  }

  .hover-elevate:not(.no-default-hover-elevate)::after,
  .active-elevate:not(.no-default-active-elevate)::after,
  .hover-elevate-2:not(.no-default-hover-elevate)::after,
  .active-elevate-2:not(.no-default-active-elevate)::after {
    content: "";
    pointer-events: none;
    position: absolute;
    inset: 0px;
    /*border-radius: inherit;   match rounded corners */
    border-radius: inherit;
    z-index: 999;
    /* sits in front of content */
  }

  .hover-elevate:hover:not(.no-default-hover-elevate)::after,
  .active-elevate:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-1);
  }

  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,
  .active-elevate-2:active:not(.no-default-active-elevate)::after {
    background-color: var(--elevate-2);
  }

  /* If there's a 1px border, adjust the inset so that it covers that parent's border */
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,
  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,
  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {
    inset: -1px;
  }
}

/* ===== COOL UNNECESSARY HOVER ANIMATIONS ===== */

/* Cosmic Glow Animation */
@keyframes cosmic-glow {
  0%, 100% { 
    box-shadow: 0 0 20px rgba(168, 85, 247, 0.4), 0 0 40px rgba(168, 85, 247, 0.2);
  }
  50% { 
    box-shadow: 0 0 30px rgba(168, 85, 247, 0.8), 0 0 60px rgba(168, 85, 247, 0.4), 0 0 90px rgba(0, 246, 255, 0.3);
  }
}

/* Floating Animation */
@keyframes float-cosmic {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg);
  }
  25% {
    transform: translateY(-10px) rotate(5deg);
  }
  50% { 
    transform: translateY(-5px) rotate(-3deg);
  }
  75% {
    transform: translateY(-15px) rotate(8deg);
  }
}

/* Particle Burst Animation */
@keyframes particle-burst {
  0% {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }
  50% {
    transform: scale(1.2) rotate(180deg);
    opacity: 0.8;
  }
  100% {
    transform: scale(1.5) rotate(360deg);
    opacity: 0;
  }
}

/* 3D Card Flip */
@keyframes card-tilt {
  0% {
    transform: perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0px);
  }
  100% {
    transform: perspective(1000px) rotateX(-5deg) rotateY(10deg) translateZ(50px);
  }
}

/* Ripple Effect */
@keyframes ripple {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  100% {
    transform: scale(4);
    opacity: 0;
  }
}

/* Color Shift Animation */
@keyframes color-shift {
  0% { filter: hue-rotate(0deg) saturate(1); }
  25% { filter: hue-rotate(90deg) saturate(1.2); }
  50% { filter: hue-rotate(180deg) saturate(1.4); }
  75% { filter: hue-rotate(270deg) saturate(1.2); }
  100% { filter: hue-rotate(360deg) saturate(1); }
}

/* Morphing Border */
@keyframes morph-border {
  0%, 100% {
    border-radius: 12px;
  }
  25% {
    border-radius: 25px 12px 25px 12px;
  }
  50% {
    border-radius: 35px;
  }
  75% {
    border-radius: 12px 25px 12px 25px;
  }
}

/* Glitch Effect */
@keyframes glitch-anim {
  0% { transform: translate(0); }
  20% { transform: translate(-2px, 2px); }
  40% { transform: translate(-2px, -2px); }
  60% { transform: translate(2px, 2px); }
  80% { transform: translate(2px, -2px); }
  100% { transform: translate(0); }
}

@keyframes glitch-anim2 {
  0% { transform: translate(0); }
  20% { transform: translate(2px, 2px); }
  40% { transform: translate(2px, -2px); }
  60% { transform: translate(-2px, 2px); }
  80% { transform: translate(-2px, -2px); }
  100% { transform: translate(0); }
}

/* ===== HOVER EFFECT CLASSES ===== */

.cosmic-hover {
  position: relative;
  overflow: visible;
  transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.cosmic-hover:hover {
  animation: cosmic-glow 2s ease-in-out infinite, float-cosmic 3s ease-in-out infinite;
  transform: translateY(-10px) scale(1.02);
}

.cosmic-hover:hover::before {
  content: '';
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  background: linear-gradient(45deg, transparent, rgba(168, 85, 247, 0.3), transparent, rgba(0, 246, 255, 0.3), transparent);
  z-index: -1;
  border-radius: inherit;
  animation: color-shift 3s linear infinite;
}

.card-3d-hover {
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  transform-style: preserve-3d;
}

.card-3d-hover:hover {
  animation: card-tilt 0.6s ease-out forwards, morph-border 4s ease-in-out infinite;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 0 0 50px rgba(168, 85, 247, 0.4);
}

.ripple-button {
  position: relative;
  overflow: hidden;
}

.ripple-button:hover::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 5px;
  height: 5px;
  background: rgba(255, 255, 255, 0.5);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  animation: ripple 0.6s linear;
}

.icon-disco {
  transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.icon-disco:hover {
  animation: color-shift 1s linear infinite;
  transform: rotate(360deg) scale(1.2);
  filter: drop-shadow(0 0 10px rgba(168, 85, 247, 0.8));
}

.particle-effect {
  position: relative;
}

.particle-effect:hover::before,
.particle-effect:hover::after {
  content: '✨';
  position: absolute;
  pointer-events: none;
  font-size: 12px;
  color: rgba(168, 85, 247, 0.8);
  animation: particle-burst 1.5s ease-out infinite;
}

.particle-effect:hover::before {
  top: 10%;
  left: 10%;
  animation-delay: 0s;
}

.particle-effect:hover::after {
  top: 80%;
  right: 10%;
  animation-delay: 0.75s;
}

.text-rainbow-hover {
  background: linear-gradient(45deg, #a855f7, #00f6ff, #ff00c8, #a855f7);
  background-size: 300% 300%;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  transition: all 0.3s ease;
}

.text-rainbow-hover:hover {
  background-position: 100% 0%;
  animation: color-shift 2s linear infinite;
  transform: scale(1.05);
}

.glitch-hover {
  position: relative;
}

.glitch-hover:hover::before,
.glitch-hover:hover::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch-hover:hover::before {
  animation: glitch-anim 0.3s infinite linear alternate-reverse;
  color: #ff00c8;
  z-index: -1;
}

.glitch-hover:hover::after {
  animation: glitch-anim2 0.3s infinite linear alternate-reverse;
  color: #00f6ff;
  z-index: -2;
}